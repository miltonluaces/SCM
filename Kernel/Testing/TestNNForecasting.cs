#region Imports

using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using MachineLearning;
using Maths;

#endregion

namespace Testing {

    [TestClass]
    public class TestNNForecasting   {

        string path = "C:/AILogSys";
        string version = "3.3.1";

        #region Tests 

        [TestMethod]
        public void Prueba01_Univariate()   {
            ITsForecast nnf = new NNForecasting(path, version, mw, nHidden, dec, minDecExp, range, it, maxIt, normFactor, normMinFactor, normMaxFactor, negAllowed, cal, maxVarRatio, histForVR, trace);
            int horizon = 12; 
            nnf.LoadData(ts, 0);
            nnf.Calculate();
            double[] fcst = nnf.GetFcst(horizon);
            for (int i = 0; i < fcst.Length; i++) { Console.Write(fcst[i].ToString("00") + " ");  }
            RNet rnet = new RNet(path, version);
            List<RNet.Params> pars = new List<RNet.Params>();
            GenRCode grc = new GenRCode("Test1");
            grc.AddHistFcst(1, ts, fcst);
            grc.AddPlot(1);
            grc.Close();
        }

        [TestMethod]
        public void Prueba02_Univariate() {
            ITsForecast nnf = new NNForecasting(path, version, mw, nHidden, dec, minDecExp, range, it, maxIt, normFactor, normMinFactor, normMaxFactor, negAllowed, cal, maxVarRatio, histForVR, trace);
            int horizon = 12;
            nnf.LoadData(ts2, 0);
            nnf.Calculate();
            double[] fcst = nnf.GetFcst(horizon);
            for (int i = 0; i < fcst.Length; i++) { Console.Write(fcst[i].ToString("00") + " "); }
        }

        [TestMethod]
        public void Prueba03_Univariate()  {
            ITsForecast nnf = new NNForecasting(path, version, mw, nHidden, dec, minDecExp, range, it, maxIt, normFactor, normMinFactor, normMaxFactor, negAllowed, cal, maxVarRatio, histForVR, trace);
            int horizon = 12;
            nnf.LoadData(ts3, 0);
            nnf.Calculate();
            double[] fcst = nnf.GetFcst(horizon);
            for (int i = 0; i < fcst.Length; i++) { Console.Write(fcst[i].ToString("00") + " "); }
        }

        [TestMethod]
        public void Prueba04_Univariate()  {
            ITsForecast nnf = new NNForecasting(path, version, mw, nHidden, dec, minDecExp, range, it, maxIt, normFactor, normMinFactor, normMaxFactor, negAllowed, cal, maxVarRatio, histForVR, trace);
            int horizon = 12;
            nnf.LoadData(ts4, 0);
            nnf.Calculate();
            double[] fcst = nnf.GetFcst(horizon);
            for (int i = 0; i < fcst.Length; i++) { Console.Write(fcst[i].ToString("00") + " "); }
        }

        [TestMethod]
        public void Prueba05_Univariate()  {
            ITsForecast nnf = new NNForecasting(path, version, mw, nHidden, dec, minDecExp, range, it, maxIt, normFactor, normMinFactor, normMaxFactor, negAllowed, cal, maxVarRatio, histForVR, trace);
            int horizon = 12; 
            nnf.LoadData(ts5, 0);
            nnf.Calculate();
            double[] fcst = nnf.GetFcst(horizon);
            for (int i = 0; i < fcst.Length; i++) { Console.Write(fcst[i].ToString("00") + " "); }
        }

        [TestMethod]
        public void Prueba06_Univariate() {
            double[] ts6 = { 2.0, 6.0, 2.0, 0.0, 0.0, 0.0, 1.0, 29.0, 0.0, 6.0, 6.0, 0.0, 1.0, 0.0, 5.0, 2.0, 2.0, 3.0, 0.0, 1.0, 2.0, 1.0, 5.0, 1.0, 2.0, 0.0, 3.0, 1.0, 47.0, 4.0, 13.0, 3.0, 0.0, 1.0, 1.0, 51.0, 10.0, 4.0, 1.0, 0.0, 2.0, 1.0, 37.0, 9.0, 4.0, 3.0, 0.0, 1.0, 4.0, 1.0, 4.0, 5.0, 3.0, 0.0, 1.0, 1.0, 10.0, 3.0, 9.0, 0.0, 0.0, 0.0, 6.0, 29.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 25.0, 8.0, 2.0, 0.0, 0.0, 1.0, 1.0, 30.0, 4.0, 0.0, 2.0, 0.0, 0.0, 16.0, 38.0, 0.0, 0.0, -7.0, 0.0, 0.0, 6.0, 18.0, 4.0, 2.0, 0.0, 0.0, 1.0, 12.0, 14.0, 1.0, 2.0, 0.0, 0.0, 0.0, 2.0, 31.0, 8.0, 1.0, 1.0, 0.0, 0.0, 2.0, 35.0, 2.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 7.0, 1.0, 2.0, 0.0, 1.0, 2.0, 31.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 28.0, 1.0, 7.0, 1.0, 0.0, 1.0, 2.0, 19.0, 0.0, 7.0, 1.0, 0.0, 1.0, 2.0, 29.0, 6.0, 3.0, 1.0, 0.0, 1.0, 3.0, 23.0, 11.0, 5.0, 4.0, 0.0, 1.0, 0.0, 2.0, 6.0, 1.0, 1.0, 0.0, 0.0, 8.0, 51.0, 1.0, 3.0, 2.0, 0.0, 0.0, 10.0, 17.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 21.0, 0.0, 2.0, 0.0, 0.0, 0.0, 5.0, 6.0, 2.0, 26.0, 5.0, 0.0, 12.0, 2.0, 23.0, 9.0, 1.0, 3.0, 0.0, 0.0, 1.0, 28.0, 2.0, 3.0, -4.0, 0.0, 1.0, 1.0, 54.0, 0.0, 3.0, 1.0, 0.0, 2.0, 6.0, 25.0, 0.0, 4.0, 3.0, 0.0, 4.0, 29.0, 22.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 24.0, 1.0, 56.0, 0.0, 0.0, 1.0, 7.0, 32.0, 0.0, 9.0, 0.0, 0.0, 0.0, 1.0, 37.0, 3.0, 27.0, 1.0, 0.0, 0.0, 1.0, 84.0, 2.0, 16.0, 1.0, 0.0, 0.0, 1.0, 65.0, 2.0, 28.0, 0.0, 0.0, 3.0, 4.0, 6.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 1.0, 25.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 13.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 18.0, 2.0, 10.0, 5.0, 0.0, 0.0, 6.0, 26.0, 4.0, 1.0, 2.0, 0.0, 0.0, 2.0, 26.0, 0.0, 2.0, 1.0, 0.0, 0.0, 5.0, 27.0, 3.0, 1.0, 1.0, 0.0, 2.0, 1.0, 10.0, 6.0, 1.0, 1.0, 0.0, 0.0, 0.0, 23.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 40.0, 9.0, 0.0, 0.0, 0.0, 0.0, 7.0, 24.0, 1.0, 4.0, 2.0, 0.0, 0.0, 2.0, 43.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 4.0, 12.0, 2.0, 0.0, 2.0, 13.0, 0.0, 2.0, 4.0, 3.0, 0.0, 0.0, 0.0, 7.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 21.0, 7.0, 0.0, 0.0, 0.0, 0.0, 3.0, 18.0, 1.0, 2.0, 1.0, 0.0, 0.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 21.0, 2.0, 2.0, 3.0, 0.0, 0.0, 4.0, 25.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 13.0, 4.0, 0.0, 0.0, 0.0, 1.0, 9.0, 22.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 29.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 4.0, 12.0, 0.0, -12.0, 4.0, 13.0, 1.0, 2.0, 2.0, 0.0, 0.0, -12.0, 22.0, 3.0, 4.0, 0.0, 0.0, 0.0, 3.0, 10.0, 1.0, 0.0, 2.0, 0.0, 0.0, 8.0, 20.0, 4.0, 0.0, 0.0, 0.0, 0.0, 10.0, 36.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 3.0, 2.0, 0.0, 0.0, 0.0, 20.0, 28.0 };
            int[] cal = { 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 };
            ITsForecast nnf = new NNForecasting(path, version, mw, nHidden, dec, minDecExp, range, it, maxIt, normFactor, normMinFactor, normMaxFactor, negAllowed, cal, maxVarRatio, histForVR, trace);
            int horizon = 12; 
            nnf.LoadData(ts6, 0);
            nnf.Calculate();
            double[] fcst = nnf.GetFcst(horizon);
            for (int i = 0; i < fcst.Length; i++) { Console.Write(fcst[i].ToString("00") + " "); }
        }

  
        #endregion

        #region Test Setup & Teardown

        int mw = 6;
        int nHidden = 6;
        int it = 5;
        int maxIt = 6000;
        double dec = 0.01;
        int minDecExp  = 4;
        double range = 0.5;
        double normFactor = 1;
        double normMinFactor = 0;
        double normMaxFactor = 1;
        bool negAllowed = false;
        double maxVarRatio = 1.3;
        int histForVR = 12;
        bool trace = false;
        int[] cal = null;

        double[] ts = { 3.297703, 3.442274, 3.581779, 3.714642, 3.839385, 3.954643, 4.059192, 4.151958, 4.232039, 4.298715, 4.351458, 4.389942, 4.414043, 4.423848, 4.419645, 4.401929, 4.371383, 4.328881,
             4.275463, 4.212331, 4.140823, 4.062399, 3.978619, 3.891120, 3.801591, 3.711751, 3.623325, 3.538015, 3.457480, 3.383309, 3.317001, 3.259942, 3.213382, 3.178424, 3.156002, 3.146869,
             3.151589,3.170524,3.203835,3.251474,3.313186,3.388516,3.476812,3.577236,3.688773,3.810253,3.940358,4.077650,4.220585,4.367538,4.516828,4.666739,4.815547,4.961541,
             5.103055,5.238485,5.366313,5.485133,5.593668,5.690787,5.775526,5.847098,5.904903,5.948543,5.977822,5.992748,5.993541,5.980618,5.954599,5.916288,5.866668,5.806884,
             5.738228,5.662118,5.580081,5.493728,5.404733,5.314806,5.225673,5.139048,5.056607,4.979968,4.910665,4.850125,4.799652,4.760402,4.733372,4.719382,4.719064,4.732854,
             4.760987,4.803487,4.860177,4.930671,5.014388,5.110555,5.218220,5.336266,5.463427,5.598305 };

        double[] ts2 = { 272.54545454545456, 11.478260869565217, 46.4, 59.086956521739133, 47.81818181818182, 26.80952380952381, 35.956521739130437, 40.0, 42.272727272727273, 21.0, 80.15, 245.52380952380952, 140.18181818181819, 148.36363636363637, 136.9047619047619, 191.0, 409.61904761904759, 190.36363636363637, 185.7391304347826, 488.4, 109.56521739130434, 34.909090909090907, 40.8, 80.727272727272734, 306.54545454545456, 126.85714285714286 };

        double[] ts3 = { 30.61538461538461, 9.777777777777779, 37.12, 50.333333333333336, 38.962962962962962, 22.52, 30.62962962962963, 32.307692307692307, 35.769230769230766, 17.888888888888889, 66.791666666666671, 198.30769230769232, 118.61538461538461, 120.88888888888889, 115.0, 162.7037037037037, 330.84615384615387, 161.07692307692307, 158.22222222222223, 390.72, 93.333333333333329, 28.444444444444443, 34.0, 68.3076923076923, 259.38461538461536, 102.46153846153847 };

        double[] ts4 = { 13.0, 0.0, 0.0, 287.13043478260869, 205.3, 542.73913043478262, 239.18181818181819, 271.23809523809524, 485.30434782608694, 342.09523809523807, 255.0, 322.0, 365.3, 326.33333333333331, 457.77272727272725, 529.13636363636363, 392.47619047619048, 414.91304347826087, 309.57142857142856, 952.5, 814.39130434782612, 508.2, 645.52173913043475, 686.27272727272725, 785.8, 975.5, 718.18181818181813, 688.71428571428567 };

        double[] ts5 = { 10.833333333333334, 0.0, 0.0, 244.59259259259258, 140.76, 444.92592592592592, 168.62962962962962, 207.32, 377.25925925925924, 244.61538461538461, 197.5, 246.07407407407408, 238.41666666666666, 222.07692307692307, 326.84615384615387, 410.88888888888891, 279.16, 293.33333333333331, 194.23076923076923, 721.23076923076928, 571.55555555555554, 377.28, 435.14814814814815, 361.77777777777777, 518.0, 589.92307692307691, 383.07692307692309, 360.80769230769232 };

        double[] regr1 = {10,10,10,10,10,20,20,20,10,10,10,10,10,10,20,20,20,10,10,10,10,10,10,10,10,10,10,30,30,30,30,30,10,10,10,10,10,10,10,10,40,40,40,40,40,10,10,10
            ,10,10,10,10,10,10,10,10,10,10,20,20,20,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,30,30,30,30,30,30,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,};

        double[] tsReg = {3.297703,3.442274,3.581779,3.714642,3.839385,4.954643,5.059192,5.151958,4.232039,4.298715,4.351458,4.389942,4.414043,4.423848,5.419645,5.401929
            ,5.371383,4.328881,4.275463,4.212331,4.140823,4.062399,3.978619,3.891120,3.801591,3.711751,3.623325,5.538015,5.457480,5.383309,5.317001,5.259942
            ,3.213382,3.178424,3.156002,3.146869,3.151589,3.170524,3.203835,3.251474,6.313186,6.388516,6.476812,6.577236,6.688773,3.810253,3.940358,4.077650
            ,4.220585,4.367538,4.516828,4.666739,4.815547,4.961541,5.103055,5.238485,5.366313,5.485133,6.593668,6.690787,6.775526,6.847098,5.904903,5.948543
            ,5.977822,5.992748,5.993541,5.980618,5.954599,5.916288,5.866668,5.806884,5.738228,5.662118,5.580081,5.493728,5.404733,5.314806,5.225673,7.139048
            ,7.056607,6.979968,6.910665,6.850125,6.799652,4.760402,4.733372,4.719382,4.719064,4.732854,4.760987,4.803487,4.860177,4.930671,5.014388,5.110555,5.218220,5.336266,5.463427,5.598305,};

        double[] regr1Fcst = { 10, 10, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10};

        private NNForecasting NNForecasting;

        [TestInitialize()]
        public void CreateObjects()
        {
        }

        [TestCleanup()]
        public void DeleteObjects()
        {
        }

        [ClassInitialize()]
        public static void FSU(TestContext testContext)
        {
        }

        [ClassCleanup()]
        public static void FTU()
        {
        }

        #endregion

    }
}

